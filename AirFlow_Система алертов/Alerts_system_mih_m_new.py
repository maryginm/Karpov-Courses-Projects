import pandas as pd
import numpy as np
import pandahouse
import seaborn as sns
import matplotlib.pyplot as plt
import os
import datetime
from datetime import timedelta
import time

import telegram
import io

from airflow.decorators import dag, task
from airflow.operators.python import get_current_context


# –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∫–∏–¥—ã–≤–∞—é—Ç—Å—è –≤ —Ç–∞—Å–∫–∏
default_args = {
    'owner': 'mih-m',
    'depends_on_past': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=2),
    'start_date': datetime.datetime(2023, 9, 17),}

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—É—Å–∫–∞ DAG
schedule_interval = '*/15 * * * *'

@dag(default_args=default_args, schedule_interval=schedule_interval, catchup=False)
def Alert_mih_m_result():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
    my_token = '' # —Ç—É—Ç –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    bot = telegram.Bot(token=my_token)
    chat_id = 000000
    chat_id_my = 111111
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ñ–∏—á–µ–π
    transcript = {
    'feed_au': 'AU (–∞–∫—Ç.–ø.) —Å—Ç–µ–Ω–∞, –≤—Å–µ',
    'ios_feed_au': 'AU (–∞–∫—Ç.–ø.) —Å—Ç–µ–Ω–∞, IOS',
    'android_feed_au': 'AU (–∞–∫—Ç. –ø.) —Å—Ç–µ–Ω–∞, Android',
    'views': '–ü—Ä–æ—Å–º. –ø–æ—Å—Ç–æ–≤ —Å—Ç–µ–Ω—ã, –≤—Å–µ',
    'ios_views': '–ü—Ä–æ—Å–º. –ø–æ—Å—Ç–æ–≤ —Å—Ç–µ–Ω—ã, IOS',
    'android_views': '–ü—Ä–æ—Å–º. –ø–æ—Å—Ç–æ–≤ —Å—Ç–µ–Ω—ã, Android',
    'likes': '–õ–∞–π–∫–∏ –ø–æ—Å—Ç–æ–≤ —Å—Ç–µ–Ω—ã, –≤—Å–µ',
    'ios_likes': '–õ–∞–π–∫–∏ –ø–æ—Å—Ç–æ–≤ —Å—Ç–µ–Ω—ã, IOS',
    'android_likes': '–õ–∞–π–∫–∏ –ø–æ—Å—Ç–æ–≤ —Å—Ç–µ–Ω—ã, Android',
    'CTR': 'CTR (likes/views) —Å—Ç–µ–Ω—ã',
    'mess_active_users': 'AU (–∞–∫—Ç.–ø.) –º–µ—Å—Å, –≤—Å–µ',
    'ios_mess_au': 'AU (–∞–∫—Ç.–ø.) –º–µ—Å—Å, IOS',
    'android_mess_au': 'AU (–∞–∫—Ç.–ø.) –º–µ—Å—Å, Android',
    'messages': '–°–æ–æ–±—â–µ–Ω–∏–π –º–µ—Å—Å, –≤—Å–µ'}
    
    @task
    def get_data():
        # –•–æ–¥–∏—Ç –≤ –∫–ª–∏–∫—Ö–∞—É—Å –∑–∞ –¥–∞–Ω–Ω—ã–º–∏
        
        connection = {
            'host': 'https://clickhouse',
            'password': 'pass',
            'user': 'user',
            'database': 'database'}

        query = '''
    WITH feed as (
    SELECT
        toStartOfFifteenMinutes(time) + INTERVAL 15 MINUTE as timespan,

        COUNT(distinct user_id) as feed_au,
        countIf(distinct user_id, os = 'iOS') as ios_feed_au,
        countIf(distinct user_id, os != 'iOS') as android_feed_au,

        countIf(action, action='view') as views,
        countIf(action, action='view' and os = 'iOS') as ios_views,
        countIf(action, action='view' and os != 'iOS') as android_views,

        countIf(action, action='like') as likes,
        countIf(action, action='like' and os = 'iOS') as ios_likes,
        countIf(action, action='like' and os != 'iOS') as android_likes,

        countIf(action, action='like') * 100 / countIf(action, action='view') as CTR
    FROM simulator_20230820.feed_actions
    WHERE 
    time >= toStartOfFifteenMinutes(now()) - INTERVAL 240 MINUTE
    and
    time < toStartOfFifteenMinutes(now())
    GROUP BY
        toStartOfFifteenMinutes(time)
    ORDER BY
        timespan 
    ),
    mess as (
    SELECT
        toStartOfFifteenMinutes(time) + INTERVAL 15 MINUTE as timespan,
        COUNT(distinct user_id) as mess_active_users,
        countIf(distinct user_id, os = 'iOS') as ios_mess_au,
        countIf(distinct user_id, os != 'iOS') as android_mess_au,
        count(reciever_id) as messages
    FROM simulator_20230820.message_actions
    WHERE 
    time >= toStartOfFifteenMinutes(now()) - INTERVAL 240 MINUTE
    and
    time < toStartOfFifteenMinutes(now())
    GROUP BY
        toStartOfFifteenMinutes(time)
    ORDER BY
        timespan 
    )

    SELECT *
    FROM feed
    JOIN mess
    USING(timespan)   
    '''
        return pandahouse.read_clickhouse(query, connection=connection)
    
    def my_mape(df):
        # –§—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–ø —Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –æ—Ç —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π 3—Ö –ø—Ä–æ—à–ª—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ 15–º–∏–Ω
        x = 45
        y1 = df.iloc[:2].mean()
        #print(y1)
        x1 = 7.5
        y2 = df.iloc[1:3].mean()
        #print(y2)
        x2 = 7.5 + 15
        y = y1 + (x - x1) * (y2 - y1) / (x2 - x1)
        f = df.iloc[3]
        return round(f, 2), round(y, 2), round((f - y) * 100 / abs(f), 2)
    
    @task
    def detect_anomaly(df:pd.DataFrame, threshold:int = 55):
        '''
        –§—É–∫—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ {tr}% –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π –æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏, –æ—Ç —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π –ø–æ 3 —Ç–æ—á–∫–∞–º –¥–æ.
        –î–∞–ª–µ–µ, –µ—Å–ª–∏ –≤ 3 —Ç–æ—á–∫–∞—Ö –¥–æ –≤—ã–±—Ä–æ—Å–∞ –µ—Å—Ç—å —Ç–∞–∫–∂–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–æ—Ä–æ–≥–∞ –æ—à–∏–±–∫–∏,
        –∞–ª–≥–æ—Ä–∏—Ç–º —Å—á–∏—Ç–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∏–∑–º–µ—Ä–µ–Ω–∏—é
        —Å–ª–µ–¥—Å—Ç–≤–∏–µ–º –≤—ã–±—Ä–æ—Å–∞ –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –µ–≥–æ.
        –ï—Å–ª–∏ —ç—Ç–æ—Ç —Ñ–∞–∫—Ç–æ—Ä –Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å, —Å–∏—Å—Ç–µ–º–∞ –∑–∞–¥–µ—Ç–µ–∫—Ç–∏—Ç 1—ã–π –≤—ã–±—Ä–æ—Å, –Ω–æ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å 
        –∞–Ω–æ–º–∞–ª–∏–∏ –µ—â–µ 2-3 –ø–µ—Ä–∏–æ–¥–∞ –ø–æ—Å–ª–µ
        –∏–∑-–∑–∞ –∫–æ–ª–µ–±–∞–Ω–∏—è —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ.
        –¢–æ –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∞ –¥–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç 1—ã–π –≤—ã–±—Ä–æ—Å, –ø–æ—Å–ª–µ —á–µ–≥–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 3 –ø–µ—Ä–∏–æ–¥–∞.
        '''
        
        # –í –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (2-10 –Ω–æ—á–∏) –±—É–¥–µ–º —É–º–µ–Ω—å—à–∞—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∫–æ–ª–µ–±–∞–Ω–∏–π.
        check_time = (max(df['timespan']).hour > 9)|(max(df['timespan']).hour < 2)
        
        # –î–ª—è —Ç–æ—á–Ω–æ–π –ø–æ–¥—Å—Ç—Ä–æ–π–∫–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ None = –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        '''
        –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–æ–±—Ä–∞–ª –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ–∏—á–∏
        –ü–æ–¥—Ä–æ–±–Ω–µ–µ —Ç—É—Ç: 
        https://git.lab.karpov.courses/practice-da/airflow-alerts/-/blob/master/dags/mih-m/intervals.ipynb
        '''
        thresholds = {
            # feed_au 35/70% –¥–µ–Ω—å/–Ω–æ—á—å
            'feed_au': 35,
            # ios_feed_au 35/70% –¥–µ–Ω—å/–Ω–æ—á—å
            'ios_feed_au': 35,
            # android_feed_au 35/70% –¥–µ–Ω—å/–Ω–æ—á—å
            'android_feed_au': 35,
            # views likes 60/120% –¥–µ–Ω—å/–Ω–æ—á—å
            'views': 60,
            'ios_views': 60,
            'android_views': 60,
            'likes': 60,
            'ios_likes': 60,
            'android_likes': 60,
            #–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ç–µ–Ω—ã –±–æ–ª—å—à–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —Ç.–∫. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–∞–ª–æ –∏ –Ω–æ—á—å—é –±–æ–ª—å—à–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
            'mess_active_users': 140,
            'ios_mess_au': 160,
            'android_mess_au': 160,
            'messages': 170,
            # CTR –∫–∞–∫ –º–µ—Ç—Ä–∏–∫–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –æ—á–µ–Ω—å —Å—Ç–∞–±–∏–ª—å–Ω–∞—è
            'CTR': 20
            }
        
        # –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
        report = {}

        # –§–ª–∞–≥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        flag = False
        
        for col in df.drop(columns='timespan'):
            # –ü–æ–¥—Å—á–µ—Ç —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –¥–ª—è –≤—Å–µ—Ö —Ç–æ—á–µ–∫ –≤—ã–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            check = [my_mape(df[col][x:x + 4]) for x in range(0, len(df[col]) - 3)]
            
            # –ï—Å–ª–∏ –ø–æ—Ä–æ–≥ –∑–∞–¥–∞–Ω –≤ —Å–ª–æ–≤–∞—Ä–µ —Ç–æ—á–Ω–æ–π –ø–æ–¥—Å—Ç—Ä–æ–π–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            thr = thresholds[col] if thresholds[col] else threshold
            
            # –ï—Å–ª–∏ –¥–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä–æ–≥ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ thr, –µ—Å–ª–∏ –Ω–æ—á–Ω–æ–µ —Ç–æ —É–≤–µ–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –≤ N —Ä–∞–∑
            thr = thr if check_time else thr * 2
            
            if abs(check[-1][-1]) > thr:
                flag = True
                if any([abs(x[-1]) > thr for x in check[-3: -1]]):
                    flag = False
                    print(f'\n–õ–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –ø–æ {col}')
                else:
                    print('>>> –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏—è <<<')
                    report[col] = check[-1]
                    print(col, '–∑–Ω–∞—á–µ–Ω–∏–µ', check[-1][0],'–ü—Ä–æ–≥–Ω–æ–∑', check[-1][1], '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ', f'{round(check[-1][-1],2)}%')
            else:
                print(f'–ú–µ—Ç—Ä–∏–∫–∞:{col} -> OK {round(check[-1][-1], 2)}%')
        print('>>>>>>>> –°—Ä–∞–±–æ—Ç–∞–ª –∞–ª–µ—Ä—Ç <<<<<<<<<' if report else '–í—Å–µ –û–ö, –∏ –í—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã')
        return report
    
    @task
    def transform_text_report(report:dict):
        # –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç –≤ —á–∞—Ç –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ —Å—Ä–∞–±–æ—Ç–∞–ª–∞

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        text_report = [f'üî¥ –°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è üî¥']

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∏—á–∏ –∏–∑ —Ä–µ–ø–æ—Ä—Ç–∞
        if report:
            for metric in report:
                text_report.append(f'–ú–µ—Ç—Ä–∏–∫–∞:\n‚ùó{transcript[metric]}‚ùó')
                text_report.append(f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {report[metric][0]}. –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {report[metric][2]}%\n')

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Å—Å—ã–ª–∫–∏ –∏ —à—Ç–µ–≥–∏
            text_report.append(f'–î–∞—à–±–æ—Ä–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\nhttps://superset.lab.karpov.courses/superset/dashboard/4260/')
            text_report.append(f'@maryginm, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏')           
        else:
            return None

        # –í–æ–∑—Ä–≤–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç
        return '\n'.join(text_report)
    
    @task
    def transform_graph_report(report:dict, df:pd.DataFrame):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        if report:
            # –°–æ–∑–¥–∞–µ–º —è—á–µ–π–∫–∏ —Å—É–±–ø–ª–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–∏–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Ç—Ä–∏–∫
            fig, axes = plt.subplots(len(report), 1, sharex=True, figsize=(10, 5*len(report)))
            
            # –°—á–µ—Ç—á–∏–∫ –ø–æ –∫–ª—é—á–∞–º —Ä–µ–ø–æ—Ä—Ç–∞
            counter = 0
            names = tuple(report.keys())
            
            # –¢—Ä—é–∫ —Å —É—Å–ª–æ–≤–∏–µ–º, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Å—Ç—Ä–æ–∏—Ç—å –∏ 1 –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —á–µ—Ä–µ–∑ —Å—É–±–ø–ª–æ—Ç
            for el in axes if len(report) > 1 else [axes]:
                metric = names[counter]
                
                # –î–∞—Ç—ã –Ω–∞ –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–∞—Ö
                el.tick_params(axis='x', labelbottom=True)

                # —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
                el.set(facecolor="xkcd:charcoal")

                # –≤–∫–ª—é—á–∏—Ç—å –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ –¥–µ–ª–µ–Ω–∏—è –æ—Å–µ–π:
                el.minorticks_on()

                # –≤–∏–¥ –ª–∏–Ω–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–∏:
                el.grid(which='major',
                    color='white',
                    linewidth=0.3)

                # –≤–∏–¥ –ª–∏–Ω–∏–π –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π —Å–µ—Ç–∫–∏:
                el.grid(which='minor',
                        color='white',
                        linewidth=0.1,
                        linestyle=':')

                # –ü–æ–¥—Å—á–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                res_pred = [round(my_mape(df[metric][x:x + 4])[1]) for x in range(0, len(df[metric]) - 3)]
                
                el.set_title(metric)
                el.set_ylabel(f'{transcript[metric]}')
                el.set_xlabel(f'–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã 15 –º–∏–Ω.')
                
                # –ì—Ä–∞—Ñ–∏–∫ –º–µ—Ç—Ä–∏–∫–∏
                sns.lineplot(ax=el, x=df.timespan,
                             y=df[metric], label=f'{transcript[metric]}',
                             marker='o', linestyle='-', linewidth=2)
                
                # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ —Å–∫. —Å—Ä–µ–¥–Ω–µ–º—É
                sns.lineplot(ax=el, x=df.timespan[3:],
                             y=res_pred, label='–û–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
                             marker='x', linestyle=':', linewidth=3)
                el.legend()

                counter += 1

            plot_object = io.BytesIO()
            fig.savefig(plot_object)
            plot_object.seek(0)
            plot_object.name = 'alert_plot.png'
        else:
            return None
        
        return plot_object
    
    @task
    def send_report(text_report, plot_object):
        if text_report:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            bot.sendMessage(chat_id=chat_id, text=text_report)
            bot.sendPhoto(chat_id=chat_id, photo=plot_object)
            plot_object.seek(0)
            bot.sendMessage(chat_id=chat_id_my, text=text_report)
            bot.sendPhoto(chat_id=chat_id_my, photo=plot_object)
            
    # –ó–∞–ø—É—Å–∫–∞–µ–º —à–∞—Ä–º–∞–Ω–∫—É
    
    # –ì—Ä—É–∑–∏–º –¥–∞–Ω–Ω—ã–µ
    dfr = get_data()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π
    report = detect_anomaly(dfr)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    send_report(transform_text_report(report), transform_graph_report(report, dfr))

    
dag_name = Alert_mih_m_result()
